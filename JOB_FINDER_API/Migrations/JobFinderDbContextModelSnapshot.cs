// <auto-generated />
using System;
using JOB_FINDER_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JOB_FINDER_API.Migrations
{
    [DbContext(typeof(JobFinderDbContext))]
    partial class JobFinderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JOB_FINDER_API.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CvId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("ResumeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapshotCv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullCvJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CandidateProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("CandidateProfiles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "123 Main Street",
                            City = "Ho Chi Minh City",
                            Description = "A passionate developer with expertise in C# and JavaScript.",
                            Dob = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Male",
                            JobTitle = "Software Developer",
                            Language = "English, Vietnamese",
                            Province = "Ho Chi Minh"
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CandidateSkill", b =>
                {
                    b.Property<int>("CandidateSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateSkillId"));

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CandidateSkillId");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("CandidateSkill");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CandidateToCompanyRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyProfileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CandidateToCompanyRequests");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CompanyProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyProfileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLogoLgr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlCompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("IndustryId");

                    b.ToTable("CompanyProfile");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            CompanyName = "Tech Corp",
                            CompanyProfileDescription = "A leading tech company specializing in software solutions.",
                            Contact = "contact@techcorp.com",
                            ImageLogoLgr = "https://res.cloudinary.com/dzf0ccons/image/upload/v1748267504/image_user/bfltymsad63wfkyp3bvl.jpg",
                            IndustryId = 1,
                            IsActive = true,
                            IsVerified = true,
                            Location = "123 Tech Street, District 1, Ho Chi Minh City",
                            TeamSize = "50-100 employees",
                            UrlCompanyLogo = "https://res.cloudinary.com/dzf0ccons/image/upload/v1748267504/image_user/bfltymsad63wfkyp3bvl.jpg",
                            Website = "https://techcorp.com"
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitHubUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonthEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonthStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("YearEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExperienceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3916),
                            ExperienceName = "Less than 1 year",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3917),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3919),
                            ExperienceName = "1-3 years",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3920),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3921),
                            ExperienceName = "More than 3 years",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3922),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.ExperienceLevel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ExperienceLevel");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Fresher"
                        },
                        new
                        {
                            id = 2,
                            name = "Junior"
                        },
                        new
                        {
                            id = 3,
                            name = "Middle"
                        },
                        new
                        {
                            id = 4,
                            name = "Senior"
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Industry", b =>
                {
                    b.Property<int>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IndustryId");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            IndustryId = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3959),
                            IndustryName = "Information Technology",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3959)
                        },
                        new
                        {
                            IndustryId = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3961),
                            IndustryName = "Finance",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3962)
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"));

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DeactivatedByAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("JobId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("LevelId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            AddressDetail = "123 Tech Street, District 1",
                            CompanyId = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4218),
                            DeactivatedByAdmin = false,
                            Description = "Develop and maintain web applications using C# and JavaScript.",
                            ExperienceLevelId = 2,
                            ExpiryDate = new DateTime(2025, 7, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4206),
                            IndustryId = 1,
                            JobTypeId = 1,
                            LevelId = 2,
                            ProvinceName = "Ho Chi Minh City",
                            Salary = 50000,
                            Status = 1,
                            TimeEnd = new DateTime(2025, 7, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4214),
                            TimeStart = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4214),
                            Title = "Junior Software Engineer",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4219)
                        },
                        new
                        {
                            JobId = 2,
                            AddressDetail = "456 Finance Avenue, Ba Dinh",
                            CompanyId = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4225),
                            DeactivatedByAdmin = false,
                            Description = "Analyze financial data and generate reports.",
                            ExperienceLevelId = 4,
                            ExpiryDate = new DateTime(2025, 7, 19, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4222),
                            IndustryId = 2,
                            JobTypeId = 3,
                            LevelId = 3,
                            ProvinceName = "Hanoi",
                            Salary = 80000,
                            Status = 0,
                            TimeEnd = new DateTime(2025, 7, 19, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4223),
                            TimeStart = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4223),
                            Title = "Senior Data Analyst",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4225)
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.JobSkill", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("JobId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSkills");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3995),
                            JobTypeName = "Full-time",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3995)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3997),
                            JobTypeName = "Part-time",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3998)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3999),
                            JobTypeName = "Remote",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4000)
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4031),
                            LevelName = "Intern",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4032)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4034),
                            LevelName = "Junior",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4034)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4036),
                            LevelName = "Senior",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4036)
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedJobId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("RelatedJobId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3741),
                            RoleName = "Candidate",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3743)
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3747),
                            RoleName = "Company",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3747)
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3748),
                            RoleName = "Admin",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(3748)
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4068),
                            SkillName = "C#",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4068)
                        },
                        new
                        {
                            SkillId = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4070),
                            SkillName = "JavaScript",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4071)
                        },
                        new
                        {
                            SkillId = 3,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4072),
                            SkillName = "SQL",
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4073)
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4270),
                            Email = "tinhadmin@gmail.com",
                            FullName = "tinh",
                            IsActive = true,
                            Password = "123",
                            Phone = "0123456789",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4270)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4275),
                            Email = "contact@techcorp.com",
                            FullName = "Tech Corp",
                            IsActive = true,
                            Password = "123",
                            Phone = "0987654321",
                            RoleId = 2,
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4276)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4279),
                            Email = "admin@jobfinder.com",
                            FullName = "Admin User",
                            IsActive = true,
                            Password = "123",
                            Phone = "0912345678",
                            RoleId = 3,
                            UpdatedAt = new DateTime(2025, 6, 4, 8, 12, 55, 7, DateTimeKind.Utc).AddTicks(4279)
                        });
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.UserFavoriteJob", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("UserFavoriteJobs");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Application", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.CV", "CV")
                        .WithMany("Applications")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Applications_CVs_UniqueCvId");

                    b.HasOne("JOB_FINDER_API.Models.Job", "Job")
                        .WithMany("Applications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CV", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.User", "User")
                        .WithMany("CVs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CandidateProfile", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.User", "User")
                        .WithOne("CandidateProfile")
                        .HasForeignKey("JOB_FINDER_API.Models.CandidateProfile", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CandidateSkill", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.Skill", "Skill")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.CandidateProfile", null)
                        .WithMany("CandidateSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CompanyProfile", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.User", "User")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("JOB_FINDER_API.Models.CompanyProfile", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Contact", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Education", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.User", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Experience", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.User", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Job", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.User", "Company")
                        .WithMany("PostedJobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.ExperienceLevel", "ExperienceLevel")
                        .WithMany("Jobs")
                        .HasForeignKey("ExperienceLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.Industry", "Industry")
                        .WithMany("Jobs")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.JobType", "JobType")
                        .WithMany("Jobs")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.Level", "Level")
                        .WithMany("Jobs")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ExperienceLevel");

                    b.Navigation("Industry");

                    b.Navigation("JobType");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.JobSkill", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.Job", "Job")
                        .WithMany("JobSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.Skill", "Skill")
                        .WithMany("JobSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Message", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.Job", "RelatedJob")
                        .WithMany()
                        .HasForeignKey("RelatedJobId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JOB_FINDER_API.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("RelatedJob");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.User", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.UserFavoriteJob", b =>
                {
                    b.HasOne("JOB_FINDER_API.Models.Job", "Job")
                        .WithMany("FavoritedByUsers")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JOB_FINDER_API.Models.User", "User")
                        .WithMany("FavoriteJobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CV", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.CandidateProfile", b =>
                {
                    b.Navigation("CandidateSkills");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.ExperienceLevel", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Industry", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Job", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("FavoritedByUsers");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.JobType", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Level", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.Skill", b =>
                {
                    b.Navigation("CandidateSkills");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("JOB_FINDER_API.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CVs");

                    b.Navigation("CandidateProfile");

                    b.Navigation("CompanyProfile");

                    b.Navigation("Contacts");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("FavoriteJobs");

                    b.Navigation("PostedJobs");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
